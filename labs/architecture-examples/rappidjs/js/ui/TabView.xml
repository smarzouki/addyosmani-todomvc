<?xml version="1.0"?>
<ui:ItemsView xmlns="http://www.w3.org/1999/xhtml" xmlns:js="js.core" xmlns:ui="js.ui">
    <js:Imports>
        js.ui.View;
        js.ui.SelectionView;
        js.ui.SegmentedView;
    </js:Imports>
    <js:Script>
        <![CDATA[
        (function (View, SelectionView, SegmentedView) {
            return {
                defaults:{
                    selectedIndex:0,
                    selectedView:null,
                    tabClassName: 'nav nav-tabs'
                },
                _initializeLayoutChildren:function (children) {
                    var child;
                    var self = this;
                    for (var i = 0; i < children.length; i++) {
                        child = children[i];
                        if (!this.$selectionView && child instanceof SelectionView) {
                            this.$selectionView = child;
                            this.$selectionView.set({items: []});
                            this.$selectionView.bind('change:selectedViews', this._onTabChange, this);
                        } else if (!this.$segmentedView && child instanceof SegmentedView) {
                            this.$segmentedView = child;
                        }
                    }
                    this.callBase();
                },
                _renderChild:function (child) {
                    if (child instanceof View && child != this.$selectionView && child != this.$segmentedView) {
                        this.$selectionView.addItem(child);
                        this.$segmentedView.addChild(child);
                    } else {
                        this.callBase();
                    }
                },
                _onTabChange:function (e) {
                    if (e.$.length > 0) {
                        this.$segmentedView.set({visibleView:e.$[0].$.$item});
                    }
                },
                _renderSelectedIndex:function (index) {
                    this.$selectionView.set({selectedIndex:index});
                },
                _renderSelectedView:function (view) {
                    this.$selectionView.set({selectedView:view});
                }

            }
        })
        ]]>
    </js:Script>
    <js:Template name="layout">
        <ui:SelectionView tagName="ul" class="{tabClassName}" needsSelection="true" forceSelectable="true">
            <js:Template name="item">
                <ui:View tagName="li"><ui:Link label="{$item.title}"/></ui:View>
            </js:Template>
        </ui:SelectionView>
        <ui:SegmentedView/>
    </js:Template>
</ui:ItemsView>