// This file defines data binding, etc. settings for child widgets in app18.html template.
// The 1st-level object key here (ctrl/listCtrl, etc.) is the data-dojo-attach-point set in app18.html.
{
	// Our custom controller, based on dojox/mvc/EditStoreRefController, that loads and saves data using a Dojo Object Store, and provides references to the data model (from the Dojo Object Store).
	ctrl: {
		// The complete attribute (count of completed todo items, coming as a reference in the data model) is bound to the parent widgets-in-template, so that it can update a CSS class in its root DOM node.
		complete: at(this, "complete")
	},
	// Our custom controller, based on dojox/mvc/ModelRefController, that provides references to the todo list in data model, and handles actions like adding/removing/marking.
	listCtrl: {
		// The model attribute (the todo list in data model) is bound to above todo/ctrl/TodoRefController instance, so that it's updated as soon as todo/ctrl/TodoRefController obtains the data from Dojo Object Store.
		model: at(this.ctrl, "todos"),
		// The length attribute (count of all todo items, coming as a reference in the todo list in the data model) is bound to the parent widgets-in-template, so that it can update a CSS class in its root DOM node.
		length: at(this, "present").direction(at.to)
	},
	// The check box to mark todo items complete/incomplete.
	toggleAll: {
		// It's automatically checked when there is no incomplete items, by the data binding to the count of incomplete todo items (via the todo/ctrl/TodoRefController instance), which is converted to a boolean state representing whether there is no incomplete todo items.
		checked: at(this.ctrl, "incomplete").transform(LessThanOrEqualToConverter),
		onClick: lang.hitch(this, function(e){ this.listCtrl.markAll(e.target.checked); })
	},
	// The todo list UI.
	todoList: {
		// The children attribute (the list of the todo items) is bound to the todo/ctrl/TodoListRefController instance, so that it's updated as soon as todo/ctrl/TodoRefController obtains the data from Dojo Object Store.
		children: at(this.listCtrl, "model"),
		partialRebuild: true,
		childParams: {
			listCtrl: this.listCtrl,
			// Bind hash attribute to the todo/ctrl/RouteController instance, so that todo/ctrl/_HashCompletedMixin code can determine the shown/hidden state with the completed state
			hash: at(this.routeCtrl, "hash")
		},
		childBindings: {
			editBox: {
				// The value attribute is bound to the data model for the todo item, so that the title of the todo item is in sync with the data model.
				value: at("rel:", "title"),
				// The uniqueId attribute is bound to the data model for the todo item, so that the action handler for removing the todo item (when its title is empty) can specify which todo item should be removed.
				uniqueId: at("rel:", "uniqueId"),
				editor: "dijit/form/TextBox",
				autosave: true,
				listCtrl: this.listCtrl,
				onChange: function(){ if(!this.value){ this.listCtrl.removeItem(this.uniqueId); return false; } }
			},
			checkBox: {
				// The checked attribute is bound to the data model for the todo item, so that the checked state is in sync with the completed state in the data model.
				checked: at("rel:", "completed")
			}
		}
	},
	// The count of incomplete todo items.
	countIncompleteItems: {
		// The value attribute is associated with the text in this widget, and bound to the todo/ctrl/TodoRefController instance, so that the count of incomplete todo items is updated as soon as todo/ctrl/TodoRefController obtains the data from Dojo Object Store.
		_setValueAttr: {type: "innerText", node: "domNode"},
		value: at(this.ctrl, "incomplete")
	},
	// The 's' in "items" showing the count of incomplete todo items.
	pluralIncompleteItems: {
		// The single attribute is associated with the existence of "plural" CSS class of its root DOM node. (Such association is used by todo/_CssToggleMixin code)
		_setSingleAttr: {type: "classExists", className: "plural"},
		// The single attribute is bound to the todo/ctrl/TodoRefController instance, so that the state whether the count of incomplete todo item is less than or equal to 1 is updated as soon as todo/ctrl/TodoRefController obtains the data from Dojo Object Store.
		single: at(this.ctrl, "incomplete").transform(LessThanOrEqualToConverter),
		constraints: {lessThanOrEqualTo: 1}
	},
	// The link to show all todo items.
	hashAll: {
		// The selected attribute is associated with the existence of "selected" CSS class of its root DOM node. (Such association is used by todo/_CssToggleMixin code)
		_setSelectedAttr: {type: "classExists", className: "selected"},
		// The selected attribute is bound to todo/ctrl/RouteController instance, so that change in URL hash will be reflected here.
		// The URL hash is converted to the state whether the hash matches to the href here, by HashSelectedConverter (a dojox/mvc data converter).
		selected: at(this.routeCtrl, "hash").transform(HashSelectedConverter)
	},
	// The link to show incomplete todo items.
	hashActive: {
		// The selected attribute is associated with the existence of "selected" CSS class of its root DOM node. (Such association is used by todo/_CssToggleMixin code)
		_setSelectedAttr: {type: "classExists", className: "selected"},
		// The selected attribute is bound to todo/ctrl/RouteController instance, so that change in URL hash will be reflected here.
		// The URL hash is converted to the state whether the hash matches to the href here, by HashSelectedConverter (a dojox/mvc data converter).
		selected: at(this.routeCtrl, "hash").transform(HashSelectedConverter)
	},
	// The link to show completed todo items.
	hashCompleted: {
		// The selected attribute is associated with the existence of "selected" CSS class of its root DOM node. (Such association is used by todo/_CssToggleMixin code)
		_setSelectedAttr: {type: "classExists", className: "selected"},
		// The selected attribute is bound to todo/ctrl/RouteController instance, so that change in URL hash will be reflected here.
		// The URL hash is converted to the state whether the hash matches to the href here, by HashSelectedConverter (a dojox/mvc data converter).
		selected: at(this.routeCtrl, "hash").transform(HashSelectedConverter)
	},
	// The count of completed todo items.
	countCompleted: {
		// The value attribute is associated with the text in this widget, and bound to the todo/ctrl/TodoRefController instance, so that the count of completed todo items is updated as soon as todo/ctrl/TodoRefController obtains the data from Dojo Object Store.
		_setValueAttr: {type: "innerText", node: "domNode"},
		value: at(this.ctrl, "complete")
	}
}
